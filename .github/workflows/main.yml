name: Node.js CI # 테스트3

on:
    push:
        branches: [dev]

env:
    DOCKER_IMAGE: ghcr.io/${{ github.actor }}/trading
    VERSION: ${{ github.sha }}
    NAME: go_cicd

jobs:
    build:
        name: Build
        runs-on: ubuntu-latest
        steps:
            - name: Check out source code # 현재 상태의 소스코드를 가상의 컨테이너 안으로 checkout 해주는 역할
              uses: actions/checkout@v2
            - name: Set up docker buildx # 가상의 컨테이너 안에 docker가 돌아갈 수 있는 환경을 설치하는 역할
              id: buildx
              uses: docker/setup-buildx-action@v1
            - name: Cache docker layers
              uses: actions/cache@v2
              with:
                  path: /tmp/.buildx-cache
                  key: ${{ runner.os }}-buildx-${{ env.VERSION }} # runner 설정에서 읽어들일거에요.
                  restore-keys: |
                      ${{ runner.os }}-buildx-
            - name: Login to ghcr # github access token을 이용해 GHCR에 로그인 하는 역할
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_TOKEN }}
            - name: Build and push # 해당 GHCR로 Docker image를 만들고 push하는 역할
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  builder: ${{ steps.buildx.outputs.name }}
                  push: true
                  tags: ${{ env.DOCKER_IMAGE }}:latest

    deploy:
        needs: build
        name: Deploy # GHCR에 로그인 후 저장되어 있는 Docker image를 이용해 컨테이너를 실행시키는 역할
        runs-on: [self-hosted, label-go]
        steps:
            - name: Login to ghcr
              uses: docker/login-action@v1
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GHCR_TOKEN }}
            - name: Docker run # 실행 중인 도커 컨테이너를 중지하고 이전 버전인 컨테이너와 이미지를 삭제 후 새로운 이미지로 컨테이너를 run하는 역할
              run: |
                  docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
                  docker run -d -p 3000:3000 --name go_cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
